#!/usr/bin/env python3

from pathlib import Path
import json
import ipaddress
import subprocess
import argparse
import netifaces

lan_if = 'lan'
addr_suffix = '1982'

def ifconfig6(iface, *args):
    print(f'ifconfig {iface} inet6 {" ".join(args)}')
    subprocess.run(['/sbin/ifconfig', iface, 'inet6', *args], check=True)

def route6(*args):
    print(f'route -6 {" ".join(args)}')
    subprocess.run(['/sbin/route', '-6', *args], check=True)

def get_default_route():
    netstat_data = json.loads(subprocess.check_output(['/usr/bin/netstat', '--libxo', 'json', '-nr6'], text=True))
    default_route = None
    for family in netstat_data.get('statistics', {}).get('route-information', {}).get('route-table', {}).get('rt-family', {}):
        if family.get('address-family', None) != 'Internet6':
            continue
        for rt in family.get('rt-entry', {}):
            if rt.get('destination', None) != 'default':
                continue
            if default_route is not None:
                raise Exception('multiple default routes found')
            default_route = ipaddress.ip_address(rt.get('gateway'))
    return default_route

def delete_default_route():
    default_route = get_default_route()
    if default_route is not None:
        route6('delete', 'default')

def get_global_addrs(iface):
    global_addrs = set()
    for inet6 in netifaces.ifaddresses(iface).get(netifaces.AF_INET6, []):
        inet6_addr = ipaddress.ip_address(inet6['addr'])
        if not inet6_addr.is_global:
            continue
        global_addrs.add(inet6_addr)
    return global_addrs

def delete_global_addrs(iface):
    for global_addr in get_global_addrs(iface):
        ifconfig6(iface, str(global_addr), '-alias')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')
    subparser = subparsers.add_parser('start')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser = subparsers.add_parser('stop')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser = subparsers.add_parser('rtadv')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser.add_argument('--rtadv-src-addr', metavar='rtadv_src_addr', required=True)
    subparser.add_argument('--rtadv-file', metavar='rtadv_file', required=True)
    args = parser.parse_args()
    action = args.action

    if action == 'start':
        delete_global_addrs(lan_if)
        delete_default_route()
    elif action == 'rtadv':
        rtadv_src_addr = args.rtadv_src_addr
        rtadv_file = args.rtadv_file
        rtadv = json.loads(Path(args.rtadv_file).read_text())

        # load the rtadv
        new_global_prefixes = []
        for option in rtadv['options']:
            if option['type'] == 3:
                new_global_prefixes.append(ipaddress.ip_network(f'{option["prefix"]}/{option["prefixlen"]}'))
    
        # first add our global addresses if they aren't already
        global_addrs = get_global_addrs(lan_if)
        new_global_addrs = set()
        for new_global_prefix in new_global_prefixes:
            new_global_addr = ipaddress.ip_address(f'{new_global_prefix.network_address}{addr_suffix}')
            new_global_addrs.add(new_global_addr)
            if new_global_addr not in global_addrs:
                ifconfig6(lan_if, f'{str(new_global_addr)}/{new_global_prefix.prefixlen}')

        # now delete the old default and add the new one 
        new_default_route = ipaddress.ip_address(f'{rtadv_src_addr}%{args.i}')
        if get_default_route() != new_default_route:
            delete_default_route()
            route6('add', 'default', str(new_default_route))

        # next step, remove old global prefixes
        for global_addr in (get_global_addrs(lan_if) - new_global_addrs):
            ifconfig6(lan_if, str(global_addr), '-alias')

    elif action == 'stop':
        delete_global_addrs(lan_if)
        delete_default_route()
    else:
        raise Exception(f'unknown action: {action}')

