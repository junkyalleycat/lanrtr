#!/usr/bin/env python3

from collections import namedtuple
from pathlib import Path
import json
import ipaddress
import subprocess
import argparse
import netifaces
import logging

lan_if = 'lanbr'
addr_suffix = '1982'

Prefix = namedtuple('Prefix', ['network', 'pltime', 'vltime'])

def ifconfig6(iface, *args):
    logging.debug(f'ifconfig {iface} inet6 {" ".join(args)}')
    subprocess.run(['/sbin/ifconfig', iface, 'inet6', *args], check=True)

def get_global_addrs(iface):
    global_addrs = set()
    for inet6 in netifaces.ifaddresses(iface).get(netifaces.AF_INET6, []):
        inet6_addr = ipaddress.ip_address(inet6['addr'])
        if not inet6_addr.is_global:
            continue
        global_addrs.add(inet6_addr)
    return global_addrs

def delete_global_addrs(iface):
    for global_addr in get_global_addrs(iface):
        ifconfig6(iface, str(global_addr), '-alias')

def defaultconf(action, iface, *args):
    subprocess.run(['/usr/local/bin/defaultconf', action, '-f', 'inet6', '-l', iface, '-p', 'ra', *args], check=True)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')
    subparser = subparsers.add_parser('start')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser = subparsers.add_parser('stop')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser = subparsers.add_parser('rtadv')
    subparser.add_argument('-i', metavar='interface', required=True)
    subparser.add_argument('--rtadv-src-addr', metavar='rtadv_src_addr', required=True)
    subparser.add_argument('--rtadv-file', metavar='rtadv_file', required=True)
    args = parser.parse_args()
    action = args.action

    if action == 'start':
        delete_global_addrs(lan_if)
        defaultconf('remove', args.i)
    elif action == 'rtadv':
        rtadv_src_addr = args.rtadv_src_addr
        rtadv_file = args.rtadv_file
        rtadv = json.loads(Path(args.rtadv_file).read_text())

        # load the rtadv
        new_global_prefixes = set()
        for option in rtadv['options']:
            if option['type'] == 3:
                network = ipaddress.ip_network(f'{option["prefix"]}/{option["prefixlen"]}')
                pltime = option['preferredlifetime']
                vltime = option['validlifetime']
                new_global_prefixes.add(Prefix(network, pltime, vltime))
    
        # first add our global addresses if they aren't already
        global_addrs = get_global_addrs(lan_if)
        new_global_addrs = set()
        for prefix in new_global_prefixes:
            new_global_addr = ipaddress.ip_address(f'{prefix.network.network_address}{addr_suffix}')
            new_global_addrs.add(new_global_addr)
            # always configure the address to refresh the pltime and vltime
            ifconfig6(lan_if, f'{str(new_global_addr)}/{prefix.network.prefixlen}', 'pltime', str(prefix.pltime), 'vltime', str(prefix.vltime))

        # allow defaultconf to handle the default
        defaultconf('add', args.i, rtadv_src_addr)

        # next step, remove old global prefixes
        for global_addr in (get_global_addrs(lan_if) - new_global_addrs):
            ifconfig6(lan_if, str(global_addr), '-alias')

    elif action == 'stop':
        delete_global_addrs(lan_if)
        defaultconf('remove', args.i)
    else:
        raise Exception(f'unknown action: {action}')

